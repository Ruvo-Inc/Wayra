import React, { useState, useEffect, useCallback } from 'react';
import { 
  MagnifyingGlassIcon, 
  MapPinIcon, 
  XMarkIcon,
  CheckCircleIcon,
  XCircleIcon,
  InformationCircleIcon
} from '@heroicons/react/24/outline';
import { Adventure, Lodging, GeocodeSearchResult, Point, ReverseGeocode } from '../../types/adventure';

interface LocationDropdownProps {
  item: Adventure | Lodging;
  triggerMarkVisited?: boolean;
  initialLatLng?: { lat: number; lng: number } | null;
  onMarkVisited?: () => void;
}

export const LocationDropdown: React.FC<LocationDropdownProps> = ({
  item,
  triggerMarkVisited = false,
  initialLatLng = null,
  onMarkVisited
}) => {
  const [reverseGeocodePlace, setReverseGeocodePlace] = useState<ReverseGeocode | null>(null);
  const [markers, setMarkers] = useState<Point[]>([]);
  const [query, setQuery] = useState('');
  const [isCustomLocation, setIsCustomLocation] = useState(false);
  const [willBeMarkedVisited, setWillBeMarkedVisited] = useState(false);
  const [previousCoords, setPreviousCoords] = useState<{ lat: number; lng: number } | null>(null);
  const [places, setPlaces] = useState<GeocodeSearchResult[]>([]);
  const [noPlaces, setNoPlaces] = useState(false);
  const [isNameAutoGenerated, setIsNameAutoGenerated] = useState(false);
  const [isCollapsed, setIsCollapsed] = useState(true);
  const [loading, setLoading] = useState(false);

  // Initialize markers from initial coordinates
  useEffect(() => {
    if (initialLatLng) {
      const newMarkers = [{
        lngLat: { lng: initialLatLng.lng, lat: initialLatLng.lat },
        name: '',
        location: '',
        activity_type: ''
      }];
      setMarkers(newMarkers);
      item.latitude = initialLatLng.lat;
      item.longitude = initialLatLng.lng;
      reverseGeocode();
    }
  }, [initialLatLng]);

  // Initialize markers from existing item coordinates
  useEffect(() => {
    if (item.longitude && item.latitude) {
      const newMarkers = [{
        lngLat: { lng: item.longitude, lat: item.latitude },
        location: item.location || '',
        name: item.name,
        activity_type: ''
      }];
      setMarkers(newMarkers);
    }
  }, [item.longitude, item.latitude]);

  // Update coordinates when markers change
  useEffect(() => {
    if (markers.length > 0) {
      const newLat = Math.round(markers[0].lngLat.lat * 1e6) / 1e6;
      const newLng = Math.round(markers[0].lngLat.lng * 1e6) / 1e6;

      if (!previousCoords || previousCoords.lat !== newLat || previousCoords.lng !== newLng) {
        item.latitude = newLat;
        item.longitude = newLng;
        setPreviousCoords({ lat: newLat, lng: newLng });
        reverseGeocode();
      }
    }
  }, [markers]);

  // Check if location will be marked as visited
  useEffect(() => {
    if ('visits' in item) {
      let willBeMarked = false;
      const today = new Date();

      for (const visit of item.visits) {
        const startDate = new Date(visit.start_date);
        const endDate = visit.end_date ? new Date(visit.end_date) : null;

        if (startDate && endDate && startDate <= today) {
          willBeMarked = true;
          break;
        }

        if (startDate && !endDate && startDate <= today) {
          willBeMarked = true;
          break;
        }
      }

      setWillBeMarkedVisited(willBeMarked);
    }
  }, [item]);

  // Handle trigger mark visited
  useEffect(() => {
    if (triggerMarkVisited && willBeMarkedVisited) {
      displaySuccessToast();
      onMarkVisited?.();
    }
  }, [triggerMarkVisited, willBeMarkedVisited]);

  // Check if location is custom
  useEffect(() => {
    setIsCustomLocation(Boolean(
      item.location !== reverseGeocodePlace?.display_name && item.location
    ));
  }, [item.location, reverseGeocodePlace]);

  const displaySuccessToast = () => {
    if (reverseGeocodePlace) {
      if (reverseGeocodePlace.region) {
        // Show toast notification
        console.log(`Visit to ${reverseGeocodePlace.region} marked`);
      }
      if (reverseGeocodePlace.city) {
        console.log(`Visit to ${reverseGeocodePlace.city} marked`);
      }
    }
  };

  const markVisited = async () => {
    if (!reverseGeocodePlace) return;

    try {
      if (!reverseGeocodePlace.region_visited && reverseGeocodePlace.region_id) {
        const regionRes = await fetch('/api/visitedregion', {
          headers: { 'Content-Type': 'application/json' },
          method: 'POST',
          body: JSON.stringify({ region: reverseGeocodePlace.region_id })
        });

        if (regionRes.ok) {
          setReverseGeocodePlace(prev => prev ? { ...prev, region_visited: true } : null);
          console.log(`Visit to ${reverseGeocodePlace.region} marked`);
        }
      }

      if (!reverseGeocodePlace.city_visited && reverseGeocodePlace.city_id) {
        const cityRes = await fetch('/api/visitedcity', {
          headers: { 'Content-Type': 'application/json' },
          method: 'POST',
          body: JSON.stringify({ city: reverseGeocodePlace.city_id })
        });

        if (cityRes.ok) {
          setReverseGeocodePlace(prev => prev ? { ...prev, city_visited: true } : null);
          console.log(`Visit to ${reverseGeocodePlace.city} marked`);
        }
      }
    } catch (error) {
      console.error('Error marking location as visited:', error);
    }
  };

  const addMarker = (lngLat: { lng: number; lat: number }) => {
    const newMarkers = [{
      lngLat,
      name: '',
      location: '',
      activity_type: ''
    }];
    setMarkers(newMarkers);
  };

  const geocode = async (e?: React.FormEvent) => {
    if (e) {
      e.preventDefault();
    }

    if (!query) {
      alert('Please enter a location to search');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`/api/reverse-geocode/search/?query=${encodeURIComponent(query)}`);
      const data = await response.json();

      if (response.ok && data.length > 0) {
        setPlaces(data);
        setNoPlaces(false);
      } else {
        setPlaces([]);
        setNoPlaces(true);
      }
    } catch (error) {
      console.error('Error geocoding:', error);
      setPlaces([]);
      setNoPlaces(true);
    } finally {
      setLoading(false);
    }
  };

  const reverseGeocode = async () => {
    if (!item.latitude || !item.longitude) return;

    try {
      const response = await fetch(`/api/reverse-geocode/?lat=${item.latitude}&lng=${item.longitude}`);
      const data = await response.json();

      if (response.ok) {
        setReverseGeocodePlace(data);
        if (!item.location) {
          item.location = data.display_name;
        }
        if (!item.name) {
          item.name = data.location_name;
        }
      }
    } catch (error) {
      console.error('Error reverse geocoding:', error);
    }
  };

  const clearMap = () => {
    setMarkers([]);
    item.latitude = null;
    item.longitude = null;
    setReverseGeocodePlace(null);
    setPlaces([]);
    setNoPlaces(false);
  };

  const handlePlaceSelect = (place: GeocodeSearchResult) => {
    const newMarkers = [{
      lngLat: { lng: Number(place.lon), lat: Number(place.lat) },
      location: place.display_name ?? '',
      name: place.name ?? '',
      activity_type: place.type ?? ''
    }];
    setMarkers(newMarkers);

    if (isNameAutoGenerated || !item.name) {
      item.name = place.name ?? '';
      setIsNameAutoGenerated(true);
    }
  };

  return (
    <div className="bg-gray-100 dark:bg-gray-800 rounded-lg mb-4">
      <div 
        className="p-4 cursor-pointer flex items-center justify-between"
        onClick={() => setIsCollapsed(!isCollapsed)}
      >
        <h3 className="text-xl font-medium">Location Information</h3>
        <div className={`transform transition-transform ${isCollapsed ? 'rotate-0' : 'rotate-90'}`}>
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </div>
      </div>

      {!isCollapsed && (
        <div className="p-4 pt-0">
          {/* Search Form */}
          <div className="mb-4">
            <label htmlFor="location" className="block text-sm font-medium mb-2">
              Location
            </label>
            <form onSubmit={geocode} className="flex gap-2">
              <input
                type="text"
                id="location"
                name="location"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="Search for a location..."
                className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
              <button 
                type="submit" 
                disabled={loading}
                className="px-4 py-2 bg-gray-600 hover:bg-gray-700 disabled:bg-gray-400 text-white rounded-md transition-colors flex items-center gap-2"
              >
                <MagnifyingGlassIcon className="w-4 h-4" />
                Search
              </button>
              <button 
                type="button" 
                onClick={clearMap}
                className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-colors"
              >
                Clear Map
              </button>
            </form>
          </div>

          {/* Search Results */}
          {places.length > 0 && (
            <div className="mb-4">
              <h3 className="font-bold text-lg mb-4">Search Results</h3>
              <div className="flex flex-wrap gap-2">
                {places.map((place, index) => (
                  <button
                    key={index}
                    type="button"
                    onClick={() => handlePlaceSelect(place)}
                    className="p-3 bg-gray-600 hover:bg-gray-700 text-white rounded-md text-left transition-colors max-w-full"
                  >
                    <div className="font-medium">{place.name}</div>
                    <div className="text-xs text-gray-300 mt-1">{place.display_name}</div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {noPlaces && (
            <p className="text-red-500 text-lg mb-4">No results found</p>
          )}

          {/* Map Placeholder */}
          <div className="mb-4">
            <div 
              className="relative aspect-video w-full bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center cursor-pointer"
              onClick={() => {
                // Simulate map click - in a real implementation, this would be handled by the map library
                const randomLat = 40.7128 + (Math.random() - 0.5) * 0.1;
                const randomLng = -74.0060 + (Math.random() - 0.5) * 0.1;
                addMarker({ lat: randomLat, lng: randomLng });
              }}
            >
              <div className="text-center">
                <MapPinIcon className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                <p className="text-gray-500 dark:text-gray-400">
                  Interactive Map
                  {markers.length > 0 && (
                    <span className="block text-sm mt-1">
                      Marker at: {markers[0].lngLat.lat.toFixed(6)}, {markers[0].lngLat.lng.toFixed(6)}
                    </span>
                  )}
                </p>
              </div>
            </div>
          </div>

          {/* Location Details */}
          {reverseGeocodePlace && (
            <div className="p-4 bg-gray-600 text-white rounded-lg shadow-md mb-4">
              <h3 className="text-lg font-bold mb-2">Location Details</h3>
              <p className="mb-1">
                <span className="font-semibold">Display Name:</span>{' '}
                {reverseGeocodePlace.city ? `${reverseGeocodePlace.city}, ` : ''}
                {reverseGeocodePlace.region}, {reverseGeocodePlace.country}
              </p>
              <p className="mb-1 flex items-center gap-2">
                <span className="font-semibold">Region:</span>
                {reverseGeocodePlace.region}
                {reverseGeocodePlace.region_visited ? (
                  <CheckCircleIcon className="w-4 h-4 text-green-400" />
                ) : (
                  <XCircleIcon className="w-4 h-4 text-red-400" />
                )}
              </p>
              {reverseGeocodePlace.city && (
                <p className="mb-1 flex items-center gap-2">
                  <span className="font-semibold">City:</span>
                  {reverseGeocodePlace.city}
                  {reverseGeocodePlace.city_visited ? (
                    <CheckCircleIcon className="w-4 h-4 text-green-400" />
                  ) : (
                    <XCircleIcon className="w-4 h-4 text-red-400" />
                  )}
                </p>
              )}
            </div>
          )}

          {/* Mark Visited Button */}
          {reverseGeocodePlace && (
            !reverseGeocodePlace.region_visited || 
            (!reverseGeocodePlace.city_visited && !willBeMarkedVisited)
          ) && (
            <button 
              type="button" 
              onClick={markVisited}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors mb-4"
            >
              Mark as Visited
            </button>
          )}

          {/* Will Be Marked Alert */}
          {reverseGeocodePlace && (
            (willBeMarkedVisited && !reverseGeocodePlace.region_visited && reverseGeocodePlace.region_id) ||
            (!reverseGeocodePlace.city_visited && willBeMarkedVisited && reverseGeocodePlace.city_id)
          ) && (
            <div className="flex items-center gap-2 p-3 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-md">
              <InformationCircleIcon className="w-5 h-5 flex-shrink-0" />
              <span>
                {reverseGeocodePlace.city ? `${reverseGeocodePlace.city}, ` : ''}
                {reverseGeocodePlace.region}, {reverseGeocodePlace.country} will be marked as visited
              </span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default LocationDropdown;
